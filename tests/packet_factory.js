'use strict'

const packetFactory = require('../lib/packet-factory')
const tap           = require('tap')


tap.beforeEach(function(done) {
	this.g = packetFactory()
	done()
})


tap.afterEach(function(done) {
	this.g = null
	done()
})


tap.test(function testMultipleAddBytesSize (test) {
	const good_buffer = Buffer.from([ 0x00, 0x00, 0x00, 0x53 ])
	this.g.addBytes(good_buffer)
	this.g.addBytes(good_buffer)
	test.equal(8, this.g.getBuffer().length)
	test.done()
})


tap.test(function testPacketAndPartial (test) {
	// this packet has a full packet and the start of another
	const good_buffer = Buffer.from([ 0x00, 0x52, 0x45, 0x53, 0, 0, 0, 8, 0x00,
		0x00, 0x00, 0x1f, 0x48, 0x3a, 0x4d, 0x69, 0x6b, 0x65, 0x73, 0x2d, 0x4d,
		0x61, 0x63, 0x42, 0x6f, 0x6f, 0x6b, 0x2d, 0x41, 0x69, 0x72, 0x2e, 0x6c,
		0x6f, 0x63, 0x61, 0x6c, 0x3a, 0x32, 0x37, 0x38, 0x31, 0x36, 0x00, 0x52,
		0x45, 0x53, 0x00, 0x00, 0x00, 0x08])
	let result = this.g.addBytes(good_buffer)
	test.equal(1, result.length)

	// verify the first packet is the result
	test.ok(result[0].equals( Buffer.from([ 0x00, 0x52, 0x45, 0x53, 0, 0, 0, 8,
		0x00, 0x00, 0x00, 0x1f, 0x48, 0x3a, 0x4d, 0x69, 0x6b, 0x65, 0x73, 0x2d,
		0x4d,0x61, 0x63, 0x42, 0x6f, 0x6f, 0x6b, 0x2d, 0x41, 0x69, 0x72, 0x2e,
		0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x3a, 0x32, 0x37, 0x38, 0x31, 0x36]) ) )

	// verify the beginning of the next packet is the contents of the buffer
	test.ok(this.g.getBuffer().equals( Buffer.from([0x00, 0x52, 0x45, 0x53,
		0x00, 0x00, 0x00, 0x08]) ) )

	test.done()
})


tap.test(function testEmptyPacket (test) {
	// an empty packet has only a 12 byte header
	const good_buffer = Buffer.from([ 0x00, 0x52, 0x45, 0x53, 0, 0, 0, 8, 0x00,
		0x00, 0x00, 0x00])
	let result = this.g.addBytes(good_buffer)
	test.equal(1, result.length)
	test.ok(result[0].equals( Buffer.from([ 0x00, 0x52, 0x45, 0x53, 0, 0, 0, 8,
		0x00, 0x00, 0x00, 0x00]) ) )

	test.ok(this.g.getBuffer().equals( Buffer.from('') ) )
	test.done()
})
